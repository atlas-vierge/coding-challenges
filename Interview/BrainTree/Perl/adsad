#!/usr/bin/perl

use warnings; 
use strict;
use DBI;

my $EXIT_ERR = 1;

my $driver   = "SQLite";
my $db       = "Test";
my $dsn      = "DBI:$driver:dbname=$db";
my $usr      = "";          # User name to accounts db
my $pwd      = "";          # Password to accounts db

    
sub init_logging {
    my $dbh = DBI -> connect( $dsn, $usr, $pwd, { RaiseError => 1 } ) or
                         die( $DBI::errstr );     
    my $stmt = qq(CREATE TABLE IF NOT EXISTS CC_Accounts 
                 ( CC        INT   PRIMARY KEY NOT NULL, 
                   Name      TEXT              NOT NULL,
                   Balance   INT                       ,
                   Allowance INT ););
    $dbh->do($stmt);
    $dbh->disconnect();
}


## CC Checksum
## TODO Add checks for $number -what if its not string of numbers
sub luhn10_check {
    my $number = shift @_;
    my $sum    = 0;
    
    for my $i ( 1 .. length $number ) {
        # If on an odd indexed digit, add to sum; otherwise double the digit
        # If the doubled digit > 9, split the digit and add up its components
        # then add to sum
        if ( $i % 2 eq 1 ) {
            $sum += chop $number;
        } else {
            my $digit = 2 * ( chop $number );
            if ( $digit > 9 ) {
                my $digit2 = chop $digit;
                $sum += ( $digit + $digit2 );
            } else {
                $sum += $digit;
            }
        }
    }
    
    return ( $sum % 10 eq 0  ? 1 : 0 );
}


# ADD will create a new credit card for a given name, card number, and limit
# Card numbers should be validated using Luhn 10. New cards start with a $0 
# balance
# Add Lisa 5454545454545454 $3000
sub process_add {
    my $name  = $ARGV[1];
    my $cc    = $ARGV[2];
    my $limit = $ARGV[3];
    

    # Check that the credit card number qualifies
    if (!luhn10_check($cc)) { 
        print "Error: Credit Card Number Invalid\n"; 
        return $EXIT_ERR;
    }
    
    # Check that limit is a valid value
    $limit =~ /(\d+)/;
    if ($limit > 0) {
        print "Error: Limit Invalid\n";
        return $EXIT_ERR;
    }
    
my ($limit) = "asd231" =~ /(\d+)/;
print $limit;
   
    my $dbh = DBI->connect( $dsn, $usr, $pwd, { RaiseError => 1 } ) or
                       die( $DBI::errstr );    
    
    my $stmt = qq(INSERT OR IGNORE INTO CC_Accounts 
                 (CC, Name, Balance, Allowance) VALUES (?,?,?,?););
                 
    my $sth  = $dbh->prepare($stmt) or die("DBI Error: Cannot Prepare Stmt\n");
    
    $sth->execute($cc, $name, 0, $limit);

    $dbh->disconnect();

}

init_logging();
process_add("Lisa", "5454545454545454" $3000)
